{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/ff/JeddahMalls/frontend/src/components/StarRatings.jsx\";\nimport { randomNumber } from './app';\nimport Widget from './Widget';\n\nclass StarRatings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.unHoverOverWidget = () => {\n      this.setState({\n        highestWidgetHovered: -Infinity\n      });\n    };\n\n    this.hoverOverWidget = rating => {\n      return () => {\n        this.setState({\n          highestWidgetHovered: rating\n        });\n      };\n    };\n\n    this.fillId = \"widgetGrad\".concat(randomNumber());\n    this.state = {\n      highestWidgetHovered: -Infinity\n    };\n  }\n\n  get widgetRatingsStyle() {\n    const widgetRatingsStyle = {\n      position: 'relative',\n      boxSizing: 'border-box',\n      display: 'inline-block'\n    };\n    return this.props.ignoreInlineStyles ? {} : widgetRatingsStyle;\n  }\n\n  get widgetGradientStyle() {\n    const widgetGradientStyle = {\n      position: 'absolute',\n      zIndex: '0',\n      width: '0',\n      height: '0',\n      visibility: 'hidden'\n    };\n    return this.props.ignoreInlineStyles ? {} : widgetGradientStyle;\n  }\n\n  stopColorStyle(color) {\n    const stopColorStyle = {\n      stopColor: color,\n      stopOpacity: '1'\n    };\n    return this.props.ignoreInlineStyles ? {} : stopColorStyle;\n  }\n\n  get titleText() {\n    const _this$props = this.props,\n          typeOfWidget = _this$props.typeOfWidget,\n          selectedRating = _this$props.rating;\n    const hoveredRating = this.state.highestWidgetHovered;\n    const currentRating = hoveredRating > 0 ? hoveredRating : selectedRating; // fix it at 2 decimal places and remove trailing 0s\n\n    let formattedRating = parseFloat(currentRating.toFixed(2)).toString();\n\n    if (Number.isInteger(currentRating)) {\n      formattedRating = String(currentRating);\n    }\n\n    let widgetText = \"\".concat(typeOfWidget, \"s\");\n\n    if (formattedRating === '1') {\n      widgetText = typeOfWidget;\n    }\n\n    return \"\".concat(formattedRating, \" \").concat(widgetText);\n  }\n\n  get offsetValue() {\n    const rating = this.props.rating;\n    const ratingIsInteger = Number.isInteger(rating);\n    let offsetValue = '0%';\n\n    if (!ratingIsInteger) {\n      const firstTwoDecimals = rating.toFixed(2).split('.')[1].slice(0, 2);\n      offsetValue = \"\".concat(firstTwoDecimals, \"%\");\n    }\n\n    return offsetValue;\n  }\n\n  get childrenWithRatingState() {\n    const _this$props2 = this.props,\n          changeRating = _this$props2.changeRating,\n          selectedRating = _this$props2.rating,\n          children = _this$props2.children,\n          ignoreInlineStyles = _this$props2.ignoreInlineStyles,\n          gradientPathName = _this$props2.gradientPathName,\n          widgetEmptyColors = _this$props2.widgetEmptyColors,\n          widgetHoverColors = _this$props2.widgetHoverColors,\n          widgetRatedColors = _this$props2.widgetRatedColors,\n          widgetDimensions = _this$props2.widgetDimensions,\n          widgetSpacings = _this$props2.widgetSpacings,\n          svgIconPaths = _this$props2.svgIconPaths,\n          svgIconViewBoxes = _this$props2.svgIconViewBoxes,\n          svgs = _this$props2.svgs;\n    const highestWidgetHovered = this.state.highestWidgetHovered;\n    const numberOfWidgets = children.length;\n    return React.Children.map(children, (child, index) => {\n      const _child$props = child.props,\n            svgIconPath = _child$props.svgIconPath,\n            svgIconViewBox = _child$props.svgIconViewBox,\n            widgetHoverColor = _child$props.widgetHoverColor,\n            widgetEmptyColor = _child$props.widgetEmptyColor,\n            widgetRatedColor = _child$props.widgetRatedColor,\n            widgetDimension = _child$props.widgetDimension,\n            widgetSpacing = _child$props.widgetSpacing,\n            svg = _child$props.svg;\n      const widgetRating = index + 1;\n      const isSelected = widgetRating <= selectedRating; // hovered only matters when changeRating is true\n\n      const hoverMode = highestWidgetHovered > 0;\n      const isHovered = widgetRating <= highestWidgetHovered;\n      const isCurrentHoveredWidget = widgetRating === highestWidgetHovered; // only matters when changeRating is false\n      // given widget 5 and rating 4.2:  5 > 4.2 && 4 < 4.2;\n\n      const isPartiallyFullWidget = widgetRating > selectedRating && widgetRating - 1 < selectedRating;\n      const isFirstWidget = widgetRating === 1;\n      const isLastWidget = widgetRating === numberOfWidgets;\n      return React.cloneElement(child, {\n        selectedRating: selectedRating,\n        ignoreInlineStyles,\n        gradientPathName,\n        changeRating: changeRating ? () => changeRating(widgetRating) : null,\n        hoverOverWidget: changeRating ? this.hoverOverWidget(widgetRating) : null,\n        unHoverOverWidget: changeRating ? this.unHoverOverWidget : null,\n        inheritFillId: this.fillId,\n        isSelected,\n        isHovered,\n        isCurrentHoveredWidget,\n        isPartiallyFullWidget,\n        isFirstWidget,\n        isLastWidget,\n        hoverMode,\n        hasCustomGradientColor: (widgetRatedColor || widgetEmptyColor) && isPartiallyFullWidget,\n        svgIconPath: svgIconPath || svgIconPaths,\n        svgIconViewBox: svgIconViewBox || svgIconViewBoxes,\n        widgetHoverColor: widgetHoverColor || widgetHoverColors,\n        widgetEmptyColor: widgetEmptyColor || widgetEmptyColors,\n        widgetRatedColor: widgetRatedColor || widgetRatedColors,\n        widgetDimension: widgetDimension || widgetDimensions,\n        widgetSpacing: widgetSpacing || widgetSpacings,\n        svg: svg || svgs\n      });\n    });\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          widgetEmptyColors = _this$props3.widgetEmptyColors,\n          widgetRatedColors = _this$props3.widgetRatedColors;\n    return React.createElement(\"div\", {\n      className: \"widget-ratings\",\n      title: this.titleText,\n      style: this.widgetRatingsStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"widget-grad\",\n      style: this.widgetGradientStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"defs\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"linearGradient\", {\n      id: this.fillId,\n      x1: \"0%\",\n      y1: \"0%\",\n      x2: \"100%\",\n      y2: \"0%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"stop\", {\n      offset: \"0%\",\n      className: \"stop-color-first\",\n      style: this.stopColorStyle(widgetRatedColors),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: this.offsetValue,\n      className: \"stop-color-first\",\n      style: this.stopColorStyle(widgetRatedColors),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: this.offsetValue,\n      className: \"stop-color-final\",\n      style: this.stopColorStyle(widgetEmptyColors),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: \"100%\",\n      className: \"stop-color-final\",\n      style: this.stopColorStyle(widgetEmptyColors),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })))), this.childrenWithRatingState);\n  }\n\n}\n\nStarRatings.Widget = Widget;\nWidgetRatings.defaultProps = {\n  rating: 0,\n  typeOfWidget: 'Star',\n  changeRating: null,\n  ignoreInlineStyles: false,\n  gradientPathName: '',\n  svgIconPaths: 'm25,1 6,17h18l-14,11 5,17-15-10-15,10 5-17-14-11h18z',\n  svgIconViewBoxes: '0 0 51 48',\n  widgetRatedColors: 'rgb(109, 122, 130)',\n  widgetEmptyColors: 'rgb(203, 211, 227)',\n  widgetHoverColors: 'rgb(230, 67, 47)',\n  widgetDimensions: '50px',\n  widgetSpacings: '7px'\n};\nexport default StarRatings;","map":{"version":3,"sources":["/Users/macbook/Desktop/ff/JeddahMalls/frontend/src/components/StarRatings.jsx"],"names":["randomNumber","Widget","StarRatings","React","Component","constructor","props","unHoverOverWidget","setState","highestWidgetHovered","Infinity","hoverOverWidget","rating","fillId","state","widgetRatingsStyle","position","boxSizing","display","ignoreInlineStyles","widgetGradientStyle","zIndex","width","height","visibility","stopColorStyle","color","stopColor","stopOpacity","titleText","typeOfWidget","selectedRating","hoveredRating","currentRating","formattedRating","parseFloat","toFixed","toString","Number","isInteger","String","widgetText","offsetValue","ratingIsInteger","firstTwoDecimals","split","slice","childrenWithRatingState","changeRating","children","gradientPathName","widgetEmptyColors","widgetHoverColors","widgetRatedColors","widgetDimensions","widgetSpacings","svgIconPaths","svgIconViewBoxes","svgs","numberOfWidgets","length","Children","map","child","index","svgIconPath","svgIconViewBox","widgetHoverColor","widgetEmptyColor","widgetRatedColor","widgetDimension","widgetSpacing","svg","widgetRating","isSelected","hoverMode","isHovered","isCurrentHoveredWidget","isPartiallyFullWidget","isFirstWidget","isLastWidget","cloneElement","inheritFillId","hasCustomGradientColor","render","WidgetRatings","defaultProps"],"mappings":"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","sourcesContent":["import { randomNumber } from './app';\n\nimport Widget from './Widget';\n\nclass StarRatings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fillId = `widgetGrad${randomNumber()}`;\n    this.state = {\n      highestWidgetHovered: -Infinity\n    }\n  }\n  static Widget = Widget\n\n  get\n  widgetRatingsStyle() {\n    const widgetRatingsStyle = {\n      position: 'relative',\n      boxSizing: 'border-box',\n      display: 'inline-block'\n    };\n    return this.props.ignoreInlineStyles ? {} : widgetRatingsStyle;\n  }\n\n  get\n  widgetGradientStyle() {\n    const widgetGradientStyle = {\n      position: 'absolute',\n      zIndex: '0',\n      width: '0',\n      height: '0',\n      visibility: 'hidden'\n    };\n    return this.props.ignoreInlineStyles ? {} : widgetGradientStyle;\n  }\n\n  stopColorStyle(color) {\n    const stopColorStyle = {\n      stopColor: color,\n      stopOpacity: '1'\n    };\n    return this.props.ignoreInlineStyles ? {} : stopColorStyle;\n  }\n\n  get\n  titleText() {\n    const {\n      typeOfWidget,\n      rating: selectedRating\n    } = this.props;\n    const hoveredRating = this.state.highestWidgetHovered;\n    const currentRating = hoveredRating > 0 ? hoveredRating : selectedRating;\n    // fix it at 2 decimal places and remove trailing 0s\n    let formattedRating = parseFloat(currentRating.toFixed(2)).toString();\n    if (Number.isInteger(currentRating)) {\n      formattedRating = String(currentRating);\n    }\n    let widgetText = `${typeOfWidget}s`;\n    if (formattedRating === '1') {\n      widgetText = typeOfWidget;\n    }\n    return `${formattedRating} ${widgetText}`;\n  }\n\n  get\n  offsetValue() {\n    const rating = this.props.rating;\n    const ratingIsInteger = Number.isInteger(rating);\n    let offsetValue = '0%';\n    if (!ratingIsInteger) {\n      const firstTwoDecimals = rating.toFixed(2).split('.')[1].slice(0, 2);\n      offsetValue = `${firstTwoDecimals}%`;\n    }\n    return offsetValue;\n  }\n\n  unHoverOverWidget = () => {\n    this.setState({\n      highestWidgetHovered: -Infinity\n    })\n  }\n\n  hoverOverWidget = (rating) => {\n    return () => {\n      this.setState({\n        highestWidgetHovered: rating\n      })\n    }\n  }\n\n  get\n  childrenWithRatingState() {\n    const {\n      changeRating,\n      rating: selectedRating,\n      children,\n      ignoreInlineStyles,\n      gradientPathName,\n      widgetEmptyColors,\n      widgetHoverColors,\n      widgetRatedColors,\n      widgetDimensions,\n      widgetSpacings,\n      svgIconPaths,\n      svgIconViewBoxes,\n      svgs\n    } = this.props;\n    const { highestWidgetHovered } = this.state;\n\n    const numberOfWidgets = children.length;\n    return React.Children.map(children, (child, index) => {\n      const {\n        svgIconPath,\n        svgIconViewBox,\n        widgetHoverColor,\n        widgetEmptyColor,\n        widgetRatedColor,\n        widgetDimension,\n        widgetSpacing,\n        svg\n      } = child.props;\n\n      const widgetRating = index + 1;\n      const isSelected = widgetRating <= selectedRating;\n\n      // hovered only matters when changeRating is true\n      const hoverMode = highestWidgetHovered > 0;\n      const isHovered = widgetRating <= highestWidgetHovered;\n      const isCurrentHoveredWidget = widgetRating === highestWidgetHovered;\n\n      // only matters when changeRating is false\n      // given widget 5 and rating 4.2:  5 > 4.2 && 4 < 4.2;\n      const isPartiallyFullWidget = widgetRating > selectedRating && widgetRating - 1 < selectedRating\n\n      const isFirstWidget = widgetRating === 1;\n      const isLastWidget = widgetRating === numberOfWidgets;\n\n      return React.cloneElement(child, {\n        selectedRating: selectedRating,\n        ignoreInlineStyles,\n        gradientPathName,\n        changeRating: changeRating ? () => changeRating(widgetRating) : null,\n        hoverOverWidget: changeRating ? this.hoverOverWidget(widgetRating) : null,\n        unHoverOverWidget: changeRating ? this.unHoverOverWidget : null,\n        inheritFillId: this.fillId,\n        isSelected,\n        isHovered,\n        isCurrentHoveredWidget,\n        isPartiallyFullWidget,\n        isFirstWidget,\n        isLastWidget,\n        hoverMode,\n        hasCustomGradientColor: (widgetRatedColor || widgetEmptyColor) && isPartiallyFullWidget,\n        svgIconPath: svgIconPath || svgIconPaths,\n        svgIconViewBox: svgIconViewBox || svgIconViewBoxes,\n        widgetHoverColor: widgetHoverColor || widgetHoverColors,\n        widgetEmptyColor: widgetEmptyColor || widgetEmptyColors,\n        widgetRatedColor: widgetRatedColor || widgetRatedColors,\n        widgetDimension: widgetDimension || widgetDimensions,\n        widgetSpacing: widgetSpacing || widgetSpacings,\n        svg: svg || svgs\n      });\n    });\n  }\n\n  render() {\n    const {\n      widgetEmptyColors,\n      widgetRatedColors\n    } = this.props;\n\n    return (\n      <div\n        className=\"widget-ratings\"\n        title={this.titleText}\n        style={this.widgetRatingsStyle}\n      >\n        <svg\n          className=\"widget-grad\"\n          style={this.widgetGradientStyle}\n        >\n          <defs>\n            <linearGradient id={this.fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n              <stop offset=\"0%\" className=\"stop-color-first\" style={this.stopColorStyle(widgetRatedColors)} />\n              <stop offset={this.offsetValue} className=\"stop-color-first\" style={this.stopColorStyle(widgetRatedColors)} />\n              <stop offset={this.offsetValue} className=\"stop-color-final\" style={this.stopColorStyle(widgetEmptyColors)} />\n              <stop offset=\"100%\" className=\"stop-color-final\" style={this.stopColorStyle(widgetEmptyColors)} />\n            </linearGradient>\n          </defs>\n        </svg>\n        {this.childrenWithRatingState}\n      </div>\n    );\n  }\n}\n\nWidgetRatings.defaultProps = {\n  rating: 0,\n  typeOfWidget: 'Star',\n  changeRating: null,\n  ignoreInlineStyles: false,\n  gradientPathName: '',\n  svgIconPaths: 'm25,1 6,17h18l-14,11 5,17-15-10-15,10 5-17-14-11h18z',\n  svgIconViewBoxes: '0 0 51 48',\n  widgetRatedColors: 'rgb(109, 122, 130)',\n  widgetEmptyColors: 'rgb(203, 211, 227)',\n  widgetHoverColors: 'rgb(230, 67, 47)',\n  widgetDimensions: '50px',\n  widgetSpacings: '7px',\n};\n\nexport default StarRatings;"]},"metadata":{},"sourceType":"module"}