"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var classnames_1 = __importDefault(require("classnames"));
var react_final_form_1 = require("react-final-form");
var final_form_arrays_1 = __importDefault(require("final-form-arrays"));
var react_router_dom_1 = require("react-router-dom");
var Divider_1 = __importDefault(require("@material-ui/core/Divider"));
var styles_1 = require("@material-ui/core/styles");
var ra_core_1 = require("ra-core");
var get_1 = __importDefault(require("lodash/get"));
var getFormInitialValues_1 = __importDefault(require("./getFormInitialValues"));
var Toolbar_1 = __importDefault(require("./Toolbar"));
var TabbedFormTabs_1 = __importStar(require("./TabbedFormTabs"));
var react_router_dom_2 = require("react-router-dom");
var useStyles = styles_1.makeStyles(function (theme) { return ({
    errorTabButton: { color: theme.palette.error.main },
    content: {
        paddingTop: theme.spacing(1),
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
    },
}); });
var TabbedForm = function (_a) {
    var initialValues = _a.initialValues, defaultValue = _a.defaultValue, saving = _a.saving, props = __rest(_a, ["initialValues", "defaultValue", "saving"]);
    var redirect = react_1.useRef(props.redirect);
    // We don't use state here for two reasons:
    // 1. There no way to execute code only after the state has been updated
    // 2. We don't want the form to rerender when redirect is changed
    var setRedirect = function (newRedirect) {
        redirect.current = newRedirect;
    };
    var translate = ra_core_1.useTranslate();
    var classes = useStyles();
    var finalInitialValues = getFormInitialValues_1.default(initialValues, defaultValue, props.record);
    var submit = function (values) {
        var finalRedirect = typeof redirect.current === undefined
            ? props.redirect
            : redirect.current;
        var finalValues = ra_core_1.sanitizeEmptyValues(finalInitialValues, values);
        props.save(finalValues, finalRedirect);
    };
    return (react_1.default.createElement(react_final_form_1.Form, __assign({ key: props.version, initialValues: finalInitialValues, onSubmit: submit, mutators: __assign({}, final_form_arrays_1.default), setRedirect: setRedirect, keepDirtyOnReinitialize: true, subscription: defaultSubscription }, props, { render: function (formProps) { return (react_1.default.createElement(exports.TabbedFormView, __assign({ classes: classes, saving: formProps.submitting || saving, translate: translate }, props, formProps))); } })));
};
var defaultSubscription = {
    submitting: true,
    pristine: true,
    valid: true,
    invalid: true,
};
exports.default = TabbedForm;
exports.TabbedFormView = function (_a) {
    var basePath = _a.basePath, children = _a.children, className = _a.className, _b = _a.classes, classes = _b === void 0 ? {} : _b, form = _a.form, handleSubmit = _a.handleSubmit, invalid = _a.invalid, pristine = _a.pristine, record = _a.record, defaultRedirect = _a.redirect, resource = _a.resource, saving = _a.saving, setRedirect = _a.setRedirect, submitOnEnter = _a.submitOnEnter, tabs = _a.tabs, toolbar = _a.toolbar, translate = _a.translate, undoable = _a.undoable, value = _a.value, version = _a.version, variant = _a.variant, margin = _a.margin, rest = __rest(_a, ["basePath", "children", "className", "classes", "form", "handleSubmit", "invalid", "pristine", "record", "redirect", "resource", "saving", "setRedirect", "submitOnEnter", "tabs", "toolbar", "translate", "undoable", "value", "version", "variant", "margin"]);
    ra_core_1.useInitializeFormWithRecord(record);
    var handleSubmitWithRedirect = react_1.useCallback(function (redirect) {
        if (redirect === void 0) { redirect = defaultRedirect; }
        setRedirect(redirect);
        handleSubmit();
    }, [setRedirect, defaultRedirect, handleSubmit]);
    var tabsWithErrors = exports.findTabsWithErrors(children, form.getState().errors);
    var match = react_router_dom_2.useRouteMatch();
    var location = react_router_dom_2.useLocation();
    var url = match ? match.url : location.pathname;
    return (react_1.default.createElement("form", __assign({ className: classnames_1.default('tabbed-form', className), key: version }, sanitizeRestProps(rest)),
        react_1.default.cloneElement(tabs, {
            classes: classes,
            url: url,
            tabsWithErrors: tabsWithErrors,
        }, children),
        react_1.default.createElement(Divider_1.default, null),
        react_1.default.createElement("div", { className: classes.content }, react_1.Children.map(children, function (tab, index) {
            return tab && (react_1.default.createElement(react_router_dom_1.Route, { exact: true, path: TabbedFormTabs_1.getTabFullPath(tab, index, url) }, function (routeProps) {
                return react_1.isValidElement(tab)
                    ? react_1.default.cloneElement(tab, {
                        intent: 'content',
                        resource: resource,
                        record: record,
                        basePath: basePath,
                        hidden: !routeProps.match,
                        variant: variant,
                        margin: margin,
                    })
                    : null;
            }));
        })),
        toolbar &&
            react_1.default.cloneElement(toolbar, {
                basePath: basePath,
                className: 'toolbar',
                handleSubmitWithRedirect: handleSubmitWithRedirect,
                handleSubmit: handleSubmit,
                invalid: invalid,
                pristine: pristine,
                record: record,
                redirect: defaultRedirect,
                resource: resource,
                saving: saving,
                submitOnEnter: submitOnEnter,
                undoable: undoable,
            })));
};
exports.TabbedFormView.propTypes = {
    basePath: prop_types_1.default.string,
    children: prop_types_1.default.node,
    className: prop_types_1.default.string,
    classes: prop_types_1.default.object,
    defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
    initialValues: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
    handleSubmit: prop_types_1.default.func,
    invalid: prop_types_1.default.bool,
    location: prop_types_1.default.object,
    match: prop_types_1.default.object,
    pristine: prop_types_1.default.bool,
    record: prop_types_1.default.object,
    redirect: prop_types_1.default.oneOfType([
        prop_types_1.default.string,
        prop_types_1.default.bool,
        prop_types_1.default.func,
    ]),
    resource: prop_types_1.default.string,
    save: prop_types_1.default.func,
    saving: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]),
    submitOnEnter: prop_types_1.default.bool,
    tabs: prop_types_1.default.element.isRequired,
    tabsWithErrors: prop_types_1.default.arrayOf(prop_types_1.default.string),
    toolbar: prop_types_1.default.element,
    translate: prop_types_1.default.func,
    undoable: prop_types_1.default.bool,
    validate: prop_types_1.default.func,
    value: prop_types_1.default.number,
    version: prop_types_1.default.number,
};
exports.TabbedFormView.defaultProps = {
    submitOnEnter: true,
    tabs: react_1.default.createElement(TabbedFormTabs_1.default, null),
    toolbar: react_1.default.createElement(Toolbar_1.default, null),
};
var sanitizeRestProps = function (_a) {
    var anyTouched = _a.anyTouched, array = _a.array, asyncBlurFields = _a.asyncBlurFields, asyncValidate = _a.asyncValidate, asyncValidating = _a.asyncValidating, autofill = _a.autofill, blur = _a.blur, change = _a.change, clearAsyncError = _a.clearAsyncError, clearFields = _a.clearFields, clearSubmit = _a.clearSubmit, clearSubmitErrors = _a.clearSubmitErrors, destroy = _a.destroy, dirty = _a.dirty, dirtyFields = _a.dirtyFields, dirtyFieldsSinceLastSubmit = _a.dirtyFieldsSinceLastSubmit, dirtySinceLastSubmit = _a.dirtySinceLastSubmit, dispatch = _a.dispatch, form = _a.form, handleSubmit = _a.handleSubmit, hasSubmitErrors = _a.hasSubmitErrors, hasValidationErrors = _a.hasValidationErrors, initialize = _a.initialize, initialized = _a.initialized, initialValues = _a.initialValues, pristine = _a.pristine, pure = _a.pure, redirect = _a.redirect, reset = _a.reset, resetSection = _a.resetSection, save = _a.save, staticContext = _a.staticContext, submit = _a.submit, submitAsSideEffect = _a.submitAsSideEffect, submitError = _a.submitError, submitErrors = _a.submitErrors, submitFailed = _a.submitFailed, submitSucceeded = _a.submitSucceeded, submitting = _a.submitting, touch = _a.touch, translate = _a.translate, triggerSubmit = _a.triggerSubmit, undoable = _a.undoable, untouch = _a.untouch, valid = _a.valid, validate = _a.validate, validating = _a.validating, _reduxForm = _a._reduxForm, props = __rest(_a, ["anyTouched", "array", "asyncBlurFields", "asyncValidate", "asyncValidating", "autofill", "blur", "change", "clearAsyncError", "clearFields", "clearSubmit", "clearSubmitErrors", "destroy", "dirty", "dirtyFields", "dirtyFieldsSinceLastSubmit", "dirtySinceLastSubmit", "dispatch", "form", "handleSubmit", "hasSubmitErrors", "hasValidationErrors", "initialize", "initialized", "initialValues", "pristine", "pure", "redirect", "reset", "resetSection", "save", "staticContext", "submit", "submitAsSideEffect", "submitError", "submitErrors", "submitFailed", "submitSucceeded", "submitting", "touch", "translate", "triggerSubmit", "undoable", "untouch", "valid", "validate", "validating", "_reduxForm"]);
    return props;
};
exports.findTabsWithErrors = function (children, errors) {
    return react_1.Children.toArray(children).reduce(function (acc, child) {
        if (!react_1.isValidElement(child)) {
            return acc;
        }
        var inputs = react_1.Children.toArray(child.props.children);
        if (inputs.some(function (input) {
            return react_1.isValidElement(input) && get_1.default(errors, input.props.source);
        })) {
            return acc.concat([child.props.label]);
        }
        return acc;
    }, []);
};
